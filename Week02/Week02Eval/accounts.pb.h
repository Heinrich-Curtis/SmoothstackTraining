// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accounts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_accounts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_accounts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_accounts_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_accounts_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_accounts_2eproto;
namespace week2Eval {
class Account;
struct AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class Account_Transaction;
struct Account_TransactionDefaultTypeInternal;
extern Account_TransactionDefaultTypeInternal _Account_Transaction_default_instance_;
}  // namespace week2Eval
PROTOBUF_NAMESPACE_OPEN
template<> ::week2Eval::Account* Arena::CreateMaybeMessage<::week2Eval::Account>(Arena*);
template<> ::week2Eval::Account_Transaction* Arena::CreateMaybeMessage<::week2Eval::Account_Transaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace week2Eval {

enum Account_TransactionType : int {
  Account_TransactionType_DEBIT = 0,
  Account_TransactionType_CREDIT = 1
};
bool Account_TransactionType_IsValid(int value);
constexpr Account_TransactionType Account_TransactionType_TransactionType_MIN = Account_TransactionType_DEBIT;
constexpr Account_TransactionType Account_TransactionType_TransactionType_MAX = Account_TransactionType_CREDIT;
constexpr int Account_TransactionType_TransactionType_ARRAYSIZE = Account_TransactionType_TransactionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Account_TransactionType_descriptor();
template<typename T>
inline const std::string& Account_TransactionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Account_TransactionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Account_TransactionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Account_TransactionType_descriptor(), enum_t_value);
}
inline bool Account_TransactionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Account_TransactionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Account_TransactionType>(
    Account_TransactionType_descriptor(), name, value);
}
// ===================================================================

class Account_Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:week2Eval.Account.Transaction) */ {
 public:
  inline Account_Transaction() : Account_Transaction(nullptr) {}
  ~Account_Transaction() override;
  explicit constexpr Account_Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Account_Transaction(const Account_Transaction& from);
  Account_Transaction(Account_Transaction&& from) noexcept
    : Account_Transaction() {
    *this = ::std::move(from);
  }

  inline Account_Transaction& operator=(const Account_Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account_Transaction& operator=(Account_Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Account_Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account_Transaction* internal_default_instance() {
    return reinterpret_cast<const Account_Transaction*>(
               &_Account_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Account_Transaction& a, Account_Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Account_Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account_Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Account_Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Account_Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Account_Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Account_Transaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account_Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "week2Eval.Account.Transaction";
  }
  protected:
  explicit Account_Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // required .week2Eval.Account.TransactionType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::week2Eval::Account_TransactionType type() const;
  void set_type(::week2Eval::Account_TransactionType value);
  private:
  ::week2Eval::Account_TransactionType _internal_type() const;
  void _internal_set_type(::week2Eval::Account_TransactionType value);
  public:

  // required int32 amount = 2;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  int32_t amount() const;
  void set_amount(int32_t value);
  private:
  int32_t _internal_amount() const;
  void _internal_set_amount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:week2Eval.Account.Transaction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  int32_t amount_;
  friend struct ::TableStruct_accounts_2eproto;
};
// -------------------------------------------------------------------

class Account final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:week2Eval.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  ~Account() override;
  explicit constexpr Account(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Account& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Account& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "week2Eval.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Account_Transaction Transaction;

  typedef Account_TransactionType TransactionType;
  static constexpr TransactionType DEBIT =
    Account_TransactionType_DEBIT;
  static constexpr TransactionType CREDIT =
    Account_TransactionType_CREDIT;
  static inline bool TransactionType_IsValid(int value) {
    return Account_TransactionType_IsValid(value);
  }
  static constexpr TransactionType TransactionType_MIN =
    Account_TransactionType_TransactionType_MIN;
  static constexpr TransactionType TransactionType_MAX =
    Account_TransactionType_TransactionType_MAX;
  static constexpr int TransactionType_ARRAYSIZE =
    Account_TransactionType_TransactionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TransactionType_descriptor() {
    return Account_TransactionType_descriptor();
  }
  template<typename T>
  static inline const std::string& TransactionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TransactionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TransactionType_Name.");
    return Account_TransactionType_Name(enum_t_value);
  }
  static inline bool TransactionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TransactionType* value) {
    return Account_TransactionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 7,
    kFirstNameFieldNumber = 1,
    kLastNameFieldNumber = 2,
    kAccountIdFieldNumber = 3,
    kSsnFieldNumber = 4,
    kDateOpenedFieldNumber = 5,
    kAccountNumberFieldNumber = 6,
  };
  // repeated .week2Eval.Account.Transaction transactions = 7;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::week2Eval::Account_Transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::week2Eval::Account_Transaction >*
      mutable_transactions();
  private:
  const ::week2Eval::Account_Transaction& _internal_transactions(int index) const;
  ::week2Eval::Account_Transaction* _internal_add_transactions();
  public:
  const ::week2Eval::Account_Transaction& transactions(int index) const;
  ::week2Eval::Account_Transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::week2Eval::Account_Transaction >&
      transactions() const;

  // required string first_name = 1;
  bool has_first_name() const;
  private:
  bool _internal_has_first_name() const;
  public:
  void clear_first_name();
  const std::string& first_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_name();
  PROTOBUF_NODISCARD std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // required string last_name = 2;
  bool has_last_name() const;
  private:
  bool _internal_has_last_name() const;
  public:
  void clear_last_name();
  const std::string& last_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_name();
  PROTOBUF_NODISCARD std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // required string account_id = 3;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // required string ssn = 4;
  bool has_ssn() const;
  private:
  bool _internal_has_ssn() const;
  public:
  void clear_ssn();
  const std::string& ssn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ssn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ssn();
  PROTOBUF_NODISCARD std::string* release_ssn();
  void set_allocated_ssn(std::string* ssn);
  private:
  const std::string& _internal_ssn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssn(const std::string& value);
  std::string* _internal_mutable_ssn();
  public:

  // required string date_opened = 5;
  bool has_date_opened() const;
  private:
  bool _internal_has_date_opened() const;
  public:
  void clear_date_opened();
  const std::string& date_opened() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date_opened(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date_opened();
  PROTOBUF_NODISCARD std::string* release_date_opened();
  void set_allocated_date_opened(std::string* date_opened);
  private:
  const std::string& _internal_date_opened() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date_opened(const std::string& value);
  std::string* _internal_mutable_date_opened();
  public:

  // required string account_number = 6;
  bool has_account_number() const;
  private:
  bool _internal_has_account_number() const;
  public:
  void clear_account_number();
  const std::string& account_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_number();
  PROTOBUF_NODISCARD std::string* release_account_number();
  void set_allocated_account_number(std::string* account_number);
  private:
  const std::string& _internal_account_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_number(const std::string& value);
  std::string* _internal_mutable_account_number();
  public:

  // @@protoc_insertion_point(class_scope:week2Eval.Account)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::week2Eval::Account_Transaction > transactions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_opened_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_number_;
  friend struct ::TableStruct_accounts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Account_Transaction

// required .week2Eval.Account.TransactionType type = 1;
inline bool Account_Transaction::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Account_Transaction::has_type() const {
  return _internal_has_type();
}
inline void Account_Transaction::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::week2Eval::Account_TransactionType Account_Transaction::_internal_type() const {
  return static_cast< ::week2Eval::Account_TransactionType >(type_);
}
inline ::week2Eval::Account_TransactionType Account_Transaction::type() const {
  // @@protoc_insertion_point(field_get:week2Eval.Account.Transaction.type)
  return _internal_type();
}
inline void Account_Transaction::_internal_set_type(::week2Eval::Account_TransactionType value) {
  assert(::week2Eval::Account_TransactionType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void Account_Transaction::set_type(::week2Eval::Account_TransactionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:week2Eval.Account.Transaction.type)
}

// required int32 amount = 2;
inline bool Account_Transaction::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Account_Transaction::has_amount() const {
  return _internal_has_amount();
}
inline void Account_Transaction::clear_amount() {
  amount_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Account_Transaction::_internal_amount() const {
  return amount_;
}
inline int32_t Account_Transaction::amount() const {
  // @@protoc_insertion_point(field_get:week2Eval.Account.Transaction.amount)
  return _internal_amount();
}
inline void Account_Transaction::_internal_set_amount(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  amount_ = value;
}
inline void Account_Transaction::set_amount(int32_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:week2Eval.Account.Transaction.amount)
}

// -------------------------------------------------------------------

// Account

// required string first_name = 1;
inline bool Account::_internal_has_first_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Account::has_first_name() const {
  return _internal_has_first_name();
}
inline void Account::clear_first_name() {
  first_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Account::first_name() const {
  // @@protoc_insertion_point(field_get:week2Eval.Account.first_name)
  return _internal_first_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_first_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:week2Eval.Account.first_name)
}
inline std::string* Account::mutable_first_name() {
  std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:week2Eval.Account.first_name)
  return _s;
}
inline const std::string& Account::_internal_first_name() const {
  return first_name_.Get();
}
inline void Account::_internal_set_first_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_first_name() {
  _has_bits_[0] |= 0x00000001u;
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_first_name() {
  // @@protoc_insertion_point(field_release:week2Eval.Account.first_name)
  if (!_internal_has_first_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = first_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (first_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (first_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:week2Eval.Account.first_name)
}

// required string last_name = 2;
inline bool Account::_internal_has_last_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Account::has_last_name() const {
  return _internal_has_last_name();
}
inline void Account::clear_last_name() {
  last_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Account::last_name() const {
  // @@protoc_insertion_point(field_get:week2Eval.Account.last_name)
  return _internal_last_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_last_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:week2Eval.Account.last_name)
}
inline std::string* Account::mutable_last_name() {
  std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:week2Eval.Account.last_name)
  return _s;
}
inline const std::string& Account::_internal_last_name() const {
  return last_name_.Get();
}
inline void Account::_internal_set_last_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_last_name() {
  _has_bits_[0] |= 0x00000002u;
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_last_name() {
  // @@protoc_insertion_point(field_release:week2Eval.Account.last_name)
  if (!_internal_has_last_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = last_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:week2Eval.Account.last_name)
}

// required string account_id = 3;
inline bool Account::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Account::has_account_id() const {
  return _internal_has_account_id();
}
inline void Account::clear_account_id() {
  account_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Account::account_id() const {
  // @@protoc_insertion_point(field_get:week2Eval.Account.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_account_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:week2Eval.Account.account_id)
}
inline std::string* Account::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:week2Eval.Account.account_id)
  return _s;
}
inline const std::string& Account::_internal_account_id() const {
  return account_id_.Get();
}
inline void Account::_internal_set_account_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_account_id() {
  _has_bits_[0] |= 0x00000004u;
  return account_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_account_id() {
  // @@protoc_insertion_point(field_release:week2Eval.Account.account_id)
  if (!_internal_has_account_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = account_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  account_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:week2Eval.Account.account_id)
}

// required string ssn = 4;
inline bool Account::_internal_has_ssn() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Account::has_ssn() const {
  return _internal_has_ssn();
}
inline void Account::clear_ssn() {
  ssn_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Account::ssn() const {
  // @@protoc_insertion_point(field_get:week2Eval.Account.ssn)
  return _internal_ssn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_ssn(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 ssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:week2Eval.Account.ssn)
}
inline std::string* Account::mutable_ssn() {
  std::string* _s = _internal_mutable_ssn();
  // @@protoc_insertion_point(field_mutable:week2Eval.Account.ssn)
  return _s;
}
inline const std::string& Account::_internal_ssn() const {
  return ssn_.Get();
}
inline void Account::_internal_set_ssn(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_ssn() {
  _has_bits_[0] |= 0x00000008u;
  return ssn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_ssn() {
  // @@protoc_insertion_point(field_release:week2Eval.Account.ssn)
  if (!_internal_has_ssn()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = ssn_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ssn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ssn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account::set_allocated_ssn(std::string* ssn) {
  if (ssn != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ssn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ssn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ssn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:week2Eval.Account.ssn)
}

// required string date_opened = 5;
inline bool Account::_internal_has_date_opened() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Account::has_date_opened() const {
  return _internal_has_date_opened();
}
inline void Account::clear_date_opened() {
  date_opened_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Account::date_opened() const {
  // @@protoc_insertion_point(field_get:week2Eval.Account.date_opened)
  return _internal_date_opened();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_date_opened(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 date_opened_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:week2Eval.Account.date_opened)
}
inline std::string* Account::mutable_date_opened() {
  std::string* _s = _internal_mutable_date_opened();
  // @@protoc_insertion_point(field_mutable:week2Eval.Account.date_opened)
  return _s;
}
inline const std::string& Account::_internal_date_opened() const {
  return date_opened_.Get();
}
inline void Account::_internal_set_date_opened(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  date_opened_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_date_opened() {
  _has_bits_[0] |= 0x00000010u;
  return date_opened_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_date_opened() {
  // @@protoc_insertion_point(field_release:week2Eval.Account.date_opened)
  if (!_internal_has_date_opened()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = date_opened_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (date_opened_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    date_opened_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account::set_allocated_date_opened(std::string* date_opened) {
  if (date_opened != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  date_opened_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_opened,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (date_opened_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    date_opened_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:week2Eval.Account.date_opened)
}

// required string account_number = 6;
inline bool Account::_internal_has_account_number() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Account::has_account_number() const {
  return _internal_has_account_number();
}
inline void Account::clear_account_number() {
  account_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Account::account_number() const {
  // @@protoc_insertion_point(field_get:week2Eval.Account.account_number)
  return _internal_account_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_account_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 account_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:week2Eval.Account.account_number)
}
inline std::string* Account::mutable_account_number() {
  std::string* _s = _internal_mutable_account_number();
  // @@protoc_insertion_point(field_mutable:week2Eval.Account.account_number)
  return _s;
}
inline const std::string& Account::_internal_account_number() const {
  return account_number_.Get();
}
inline void Account::_internal_set_account_number(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  account_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_account_number() {
  _has_bits_[0] |= 0x00000020u;
  return account_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Account::release_account_number() {
  // @@protoc_insertion_point(field_release:week2Eval.Account.account_number)
  if (!_internal_has_account_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = account_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Account::set_allocated_account_number(std::string* account_number) {
  if (account_number != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  account_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:week2Eval.Account.account_number)
}

// repeated .week2Eval.Account.Transaction transactions = 7;
inline int Account::_internal_transactions_size() const {
  return transactions_.size();
}
inline int Account::transactions_size() const {
  return _internal_transactions_size();
}
inline void Account::clear_transactions() {
  transactions_.Clear();
}
inline ::week2Eval::Account_Transaction* Account::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:week2Eval.Account.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::week2Eval::Account_Transaction >*
Account::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:week2Eval.Account.transactions)
  return &transactions_;
}
inline const ::week2Eval::Account_Transaction& Account::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::week2Eval::Account_Transaction& Account::transactions(int index) const {
  // @@protoc_insertion_point(field_get:week2Eval.Account.transactions)
  return _internal_transactions(index);
}
inline ::week2Eval::Account_Transaction* Account::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::week2Eval::Account_Transaction* Account::add_transactions() {
  ::week2Eval::Account_Transaction* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:week2Eval.Account.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::week2Eval::Account_Transaction >&
Account::transactions() const {
  // @@protoc_insertion_point(field_list:week2Eval.Account.transactions)
  return transactions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace week2Eval

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::week2Eval::Account_TransactionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::week2Eval::Account_TransactionType>() {
  return ::week2Eval::Account_TransactionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_accounts_2eproto
