USAGE INSTRUCTIONS
===================================================
I wrote and compiled my submission on Ubuntu Linux (WSL to be specific) with g++.

In the same directory as this readme are a pair of cpp files, the original assignment
prompt PDF, four different text files (wordlist.txt, testFile.txt, result1.txt and result2.txt)
, and a bash script (makeBothCompare.sh). testFile and wordlist are input files: a very
small one I wrote for myself and the one from the assignment. the two cpp are files are
for different versions of the program: one uses an std::vector and the other uses std::set
for hopefully faster searching (I didn't do a perfomance comparison). makeBothCompare.sh
is a bash script that compiles both versions of the program, runs them on a given input
file (right now it's your file, wordlist.txt), and then runs diff on the file to be 
sure that both methods have the same solution.

To compile and run the code yourself, just navigate to this directory in a bash shell,
do 'chmod u+x makeBothCompare.sh', then run the script: the result files will be created
and you will hopefully see no output (diff will be quiet).  

PROBLEM DISCUSSION
===================================================
As I stated above, one of the programs uses std::vector (easier to write), and one
uses std::set (better performance due to o(log n) search, a little trickier to write).
 I would have written a multi-threaded version but I would have blown the time limit.

Conceptually the solution is simple: get each word from the input file, put it into a
common case (I pick lower case), then check a data structure and see if we already have
that word; if we do, increment its occurence counter, otherwise put it in there and give
it a count of one. At the end of populating the data structure, sort the structure so we
have the desired ordering in the problem statement.


